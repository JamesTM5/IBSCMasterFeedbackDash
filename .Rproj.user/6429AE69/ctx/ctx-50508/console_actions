{
    "type": [
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.2.1 (2022-06-23 ucrt) -- \"Funny-Looking Kid\"\nCopyright (C) 2022 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "  source(\"packageSetup.R\")",
        "\nAttaching package: ‘igraph’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    decompose, spectrum\n\n",
        "The following object is masked from ‘package:base’:\n\n    union\n\n",
        "\nAttaching package: ‘DT’\n\n",
        "The following object is masked from ‘package:networkD3’:\n\n    JS\n\n",
        "\nAttaching package: ‘shiny’\n\n",
        "The following objects are masked from ‘package:DT’:\n\n    dataTableOutput, renderDataTable\n\n",
        "── \u001B[1mAttaching packages\u001B[22m ────────────────────────────────────────────────────────────────── tidyverse 1.3.2 ──\n\u001B[32m✔\u001B[39m \u001B[34mggplot2\u001B[39m 3.3.6     \u001B[32m✔\u001B[39m \u001B[34mpurrr  \u001B[39m 0.3.4\n\u001B[32m✔\u001B[39m \u001B[34mtibble \u001B[39m 3.1.7     \u001B[32m✔\u001B[39m \u001B[34mdplyr  \u001B[39m 1.0.9\n\u001B[32m✔\u001B[39m \u001B[34mtidyr  \u001B[39m 1.2.0     \u001B[32m✔\u001B[39m \u001B[34mstringr\u001B[39m 1.4.0\n\u001B[32m✔\u001B[39m \u001B[34mreadr  \u001B[39m 2.1.2     \u001B[32m✔\u001B[39m \u001B[34mforcats\u001B[39m 0.5.1\n",
        "── \u001B[1mConflicts\u001B[22m ───────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mas_data_frame()\u001B[39m masks \u001B[34mtibble\u001B[39m::as_data_frame(), \u001B[34migraph\u001B[39m::as_data_frame()\n\u001B[31m✖\u001B[39m \u001B[34mpurrr\u001B[39m::\u001B[32mcompose()\u001B[39m       masks \u001B[34migraph\u001B[39m::compose()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32mcrossing()\u001B[39m      masks \u001B[34migraph\u001B[39m::crossing()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m        masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mgroups()\u001B[39m        masks \u001B[34migraph\u001B[39m::groups()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m           masks \u001B[34mstats\u001B[39m::lag()\n\u001B[31m✖\u001B[39m \u001B[34mpurrr\u001B[39m::\u001B[32msimplify()\u001B[39m      masks \u001B[34migraph\u001B[39m::simplify()\n",
        "\nAttaching package: ‘plotly’\n\n",
        "The following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\n",
        "The following object is masked from ‘package:igraph’:\n\n    groups\n\n",
        "The following object is masked from ‘package:stats’:\n\n    filter\n\n",
        "The following object is masked from ‘package:graphics’:\n\n    layout\n\n",
        "data.table 1.14.2 using 4 threads (see ?getDTthreads).  Latest news: r-datatable.com\n",
        "\nAttaching package: ‘data.table’\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    between, first, last\n\n",
        "The following object is masked from ‘package:purrr’:\n\n    transpose\n\n",
        "> ",
        "  ",
        "> ",
        "#Pull in config info",
        "> ",
        "  source(\"surveyConfig.R\")",
        "> ",
        "  source(\"clientConfig.R\")",
        "> ",
        "  ",
        "> ",
        "#import student data",
        "> ",
        "  nodes <- read.xlsx(file, sheet = 1)",
        "Error in file(description = xlsxFile) : invalid 'description' argument\n",
        "> ",
        "#import student data",
        "> ",
        "data <- dataFile",
        "> ",
        "  nodes <- read.xlsx(file, sheet = 1)",
        "Error in file(description = xlsxFile) : invalid 'description' argument\n",
        "> ",
        "source(\"~/IBSCMasterFeedbackDash/clientConfig.R\")",
        "> ",
        "#import student data",
        "> ",
        "data <- dataFile",
        "> ",
        "#import student data",
        "> ",
        "file <- dataFile",
        "> ",
        "  nodes <- read.xlsx(file, sheet = 1)",
        "> ",
        "  edges1 <- read.xlsx(file, sheet = 2)",
        "> ",
        "  edges2 <- read.xlsx(file, sheet = 3)",
        "> ",
        "  edges3 <- read.xlsx(file, sheet = 4)",
        "> ",
        "#extract class name from file  ",
        "> ",
        "  className <- substring(file, regexpr(\"Student\", file) + 8)",
        "> ",
        "  className <- substring(className, 1, nchar(className)-5) #remove \".xlsx\"",
        "> ",
        "  #set random seed from config file",
        "> ",
        "  set.seed (seed)",
        "> ",
        "  source(\"assets/R/makeResponseNumeric.R\")",
        "> ",
        "  nodesKeyBelongingnessPositive <- keyToNumeric(scoreData = nodes[,responseColumnsBelongingness],",
        "+ ",
        "                                        answers = nodeAnswersBelongingness,",
        "+ ",
        "                                        normalized = FALSE)",
        "> ",
        "  nodesKeyBelongingnessNegative <- nodesKeyBelongingnessPositive",
        "> ",
        "  for (i in 1:length(nodesKeyBelongingnessNegative$newAnswers)) {",
        "+ ",
        "    nodesKeyBelongingnessNegative$newAnswers[i] <- 3 - nodesKeyBelongingnessNegative$newAnswers[i]",
        "+ ",
        "  } ",
        "> ",
        "  nodesKeyBelongingnessCategorical <- data.frame(nodeAnswersBelongingness)",
        "> ",
        "  nodesKeyBelongingnessCategorical$newAnswers <- c(\"High\", \"Moderate\", \"Moderate\", \"Low\")",
        "> ",
        "  nodesKeyStudentTeacher <- keyToNumeric(scoreData = nodes[,responseColumnsStudentTeacher],",
        "+ ",
        "                                         answers = nodeAnswersStudentTeacher,",
        "+ ",
        "                                         normalized = FALSE)",
        "> ",
        "  nodesKeyStudentTeacherCategorical <- data.frame(nodeAnswersStudentTeacher)",
        "> ",
        "  nodesKeyStudentTeacherCategorical$newAnswers <- c(\"High\", \"High\", \"Moderate\", \"Moderate\", \"Low\", \"Low\")",
        "> ",
        "  names(nodesKeyStudentTeacherCategorical) <- c(\"answers\", \"newAnswers\")",
        "> ",
        "  #loop over each relevant column for additional measures such as belongingness and student-teacher questions and bind a numeric column to nodes",
        "> ",
        "  #get column numbers",
        "> ",
        "  studentTeacherRegExQuestionText <- c(",
        "+ ",
        "    \"I\\\\.can\\\\.talk\\\\.to\\\\.or\\\\.contact\\\\.my\\\\.\",",
        "+ ",
        "    \"It\\\\.is\\\\.worth\\\\.building\\\\.a\\\\.good\\\\.relationship\\\\.with\\\\.my\\\\.\",",
        "+ ",
        "    \"\\\\.and\\\\.I\\\\.have\\\\.shared\\\\.goals\\\\.for\\\\.my\\\\.progress\\\\.and\\\\.development\",",
        "+ ",
        "    \"cares\\\\.about\\\\.me\",",
        "+ ",
        "    \"has\\\\.a\\\\.good\\\\.understanding\\\\.of\\\\.my\\\\.skills\\\\.and\\\\.interests\",",
        "+ ",
        "    \"inspires\\\\.and\\\\.motivates\\\\.me\",",
        "+ ",
        "    \"recognises\\\\.and\\\\.rewards\\\\.my\\\\.efforts\"",
        "+ ",
        "  )",
        "> ",
        "  studentTeacherResponseColumnIndices <- vector()",
        "> ",
        "  for(i in 1:length(studentTeacherRegExQuestionText)) {",
        "+ ",
        "   studentTeacherResponseColumnIndices[[length(studentTeacherResponseColumnIndices)+1]] <- grep(studentTeacherRegExQuestionText[i], colnames(nodes))",
        "+ ",
        "  }",
        "> ",
        "  if(length(studentTeacherResponseColumnIndices)>7) {",
        "+ ",
        "    warning(\"more student - teacher questions have been matched than there should be.  Consider checking the studentTeacherRegExQuestionText for unwanted matches\")",
        "+ ",
        "  }",
        "> ",
        "  belongingnessRegExQuestionTextPositive <- c(",
        "+ ",
        "    \"I\\\\.feel\\\\.like\\\\.I\\\\.belong\\\\.at\",",
        "+ ",
        "    \"I\\\\.make\\\\.friends\\\\.easily\\\\.at\",",
        "+ ",
        "    \"\\\\.seem\\\\.to\\\\.like\\\\.me\"",
        "+ ",
        "  )",
        "> ",
        "  belongingnessRegExQuestionTextNegative <- c(",
        "+ ",
        "    \"I\\\\.feel\\\\.awkward\\\\.and\\\\.out\\\\.of\\\\.place\",",
        "+ ",
        "    \"I\\\\.feel\\\\.like\\\\.an\\\\.outsider\",",
        "+ ",
        "    \"I\\\\.feel\\\\.lonely\\\\.at\"",
        "+ ",
        "  )",
        "> ",
        "  belongingnessResponseColumnIndicesPositive <- vector()",
        "> ",
        "  for(i in 1:length(belongingnessRegExQuestionTextPositive)) {",
        "+ ",
        "    belongingnessResponseColumnIndicesPositive[[length(belongingnessResponseColumnIndicesPositive)+1]] <- grep(belongingnessRegExQuestionTextPositive[i], colnames(nodes))",
        "+ ",
        "  }",
        "> ",
        "  if(length(belongingnessResponseColumnIndicesPositive)>3) {",
        "+ ",
        "    warning(\"more belongingness questions have been matched than there should be.  Consider checking the belongingnessRegExQuestionTextPositive for unwanted matches\")",
        "+ ",
        "  }",
        "> ",
        "  belongingnessResponseColumnIndicesNegative <- vector()",
        "> ",
        "  for(i in 1:length(belongingnessRegExQuestionTextNegative)) {",
        "+ ",
        "    belongingnessResponseColumnIndicesNegative[[length(belongingnessResponseColumnIndicesNegative)+1]] <- grep(belongingnessRegExQuestionTextNegative[i], colnames(nodes))",
        "+ ",
        "  }",
        "> ",
        "  if(length(belongingnessResponseColumnIndicesNegative)>3) {",
        "+ ",
        "    warning(\"more belongingness questions have been matched than there should be.  Consider checking the belongingnessRegExQuestionTextNegative for unwanted matches\")",
        "+ ",
        "  }",
        "> ",
        "  #make numeric columns for belongingness positive questions (0-3)",
        "> ",
        "  for(i in 1:length(nodes[,belongingnessResponseColumnIndicesPositive])) {",
        "+ ",
        "    numericReplacementVectorPositive <- makeResponseNumeric(",
        "+ ",
        "      data = nodes[,belongingnessResponseColumnIndicesPositive[i]],",
        "+ ",
        "      conversionKey = nodesKeyBelongingnessPositive)",
        "+ ",
        "    numericReplacementColumnPositive <- data.frame(numericReplacementVectorPositive)",
        "+ ",
        "    getNames <- names(nodes)",
        "+ ",
        "    names(numericReplacementColumnPositive) <- paste0(",
        "+ ",
        "      getNames[[belongingnessResponseColumnIndicesPositive[[i]]]], \".numeric\")",
        "+ ",
        "    nodes <- cbind(nodes, numericReplacementColumnPositive)",
        "+ ",
        "  }",
        "> ",
        "  #make numeric columns for belongingness negative questions (3-0)",
        "> ",
        "  for(i in 1:length(nodes[,belongingnessResponseColumnIndicesNegative])) {",
        "+ ",
        "    numericReplacementVectorNegative <- makeResponseNumeric(",
        "+ ",
        "      data = nodes[,belongingnessResponseColumnIndicesNegative[i]],",
        "+ ",
        "      conversionKey = nodesKeyBelongingnessNegative)",
        "+ ",
        "    numericReplacementColumnNegative <- data.frame(numericReplacementVectorNegative)",
        "+ ",
        "    getNames <- names(nodes)",
        "+ ",
        "    names(numericReplacementColumnNegative) <- paste0(",
        "+ ",
        "      getNames[[belongingnessResponseColumnIndicesNegative[[i]]]], \".numeric\")",
        "+ ",
        "    nodes <- cbind(nodes, numericReplacementColumnNegative)",
        "+ ",
        "  }",
        "> ",
        "  belongingnessResponseColumnIndices <- c(",
        "+ ",
        "    belongingnessResponseColumnIndicesPositive,",
        "+ ",
        "    belongingnessResponseColumnIndicesNegative)",
        "> ",
        "  belongingnessResponseColumnIndices <- sort(belongingnessResponseColumnIndices)",
        "> ",
        "#make stratified columns for belongingness (low, medium, high)  ",
        "> ",
        "  modifiedNodes <- nodes[,belongingnessResponseColumnIndices]",
        "> ",
        "  originalNames <- names(modifiedNodes)",
        "> ",
        "  names(modifiedNodes) <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")",
        "> ",
        "  replacementNames <- names(modifiedNodes)",
        "> ",
        "  modifiedNodes <- modifiedNodes %>%",
        "+ ",
        "    left_join(nodesKeyBelongingnessCategorical, by = c(\"a\" = \"nodeAnswersBelongingness\"))",
        "> ",
        "  names(modifiedNodes)[names(modifiedNodes) == 'newAnswers'] <-  paste(originalNames[1], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodes <- modifiedNodes %>%",
        "+ ",
        "    left_join(nodesKeyBelongingnessCategorical, by = c(\"b\" = \"nodeAnswersBelongingness\"))",
        "> ",
        "  names(modifiedNodes)[names(modifiedNodes) == 'newAnswers'] <-  paste(originalNames[2], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodes <- modifiedNodes %>%",
        "+ ",
        "    left_join(nodesKeyBelongingnessCategorical, by = c(\"c\" = \"nodeAnswersBelongingness\"))",
        "> ",
        "  names(modifiedNodes)[names(modifiedNodes) == 'newAnswers'] <-  paste(originalNames[3], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodes <- modifiedNodes %>%",
        "+ ",
        "    left_join(nodesKeyBelongingnessCategorical, by = c(\"d\" = \"nodeAnswersBelongingness\"))",
        "> ",
        "  names(modifiedNodes)[names(modifiedNodes) == 'newAnswers'] <-  paste(originalNames[4], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodes <- modifiedNodes %>%",
        "+ ",
        "    left_join(nodesKeyBelongingnessCategorical, by = c(\"e\" = \"nodeAnswersBelongingness\"))",
        "> ",
        "  names(modifiedNodes)[names(modifiedNodes) == 'newAnswers'] <-  paste(originalNames[5], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodes <- modifiedNodes %>%",
        "+ ",
        "    left_join(nodesKeyBelongingnessCategorical, by = c(\"f\" = \"nodeAnswersBelongingness\"))",
        "> ",
        "  names(modifiedNodes)[names(modifiedNodes) == 'newAnswers'] <-  paste(originalNames[6], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodes <- modifiedNodes[,7:ncol(modifiedNodes)]",
        "> ",
        "  nodes <- cbind(nodes, modifiedNodes)",
        "> ",
        "  #make numeric columns for student/teacher questions (0-5) ",
        "> ",
        "  for(i in 1:length(nodes[,studentTeacherResponseColumnIndices])) {",
        "+ ",
        "    numericReplacementVector <- makeResponseNumeric(",
        "+ ",
        "      data = nodes[,studentTeacherResponseColumnIndices[i]],",
        "+ ",
        "      conversionKey = nodesKeyStudentTeacher)",
        "+ ",
        "    numericReplacementColumn <- data.frame(numericReplacementVector)",
        "+ ",
        "    getNames <- names(nodes)",
        "+ ",
        "    names(numericReplacementColumn) <- paste0(",
        "+ ",
        "      getNames[[studentTeacherResponseColumnIndices[[i]]]], \".numeric\")",
        "+ ",
        "    nodes <- cbind(nodes, numericReplacementColumn)",
        "+ ",
        "    ",
        "+ ",
        "  }",
        "> ",
        "#make stratified columns for student - teacher questions (low, medium, high)  ",
        "> ",
        "  modifiedNodesST <- nodes[,studentTeacherResponseColumnIndices]",
        "> ",
        "  originalNamesST <- names(modifiedNodesST)",
        "> ",
        "  names(modifiedNodesST) <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")",
        "> ",
        "  replacementNames <- names(modifiedNodesST)",
        "> ",
        "  modifiedNodesST <- modifiedNodesST %>%",
        "+ ",
        "    left_join(nodesKeyStudentTeacherCategorical, by = c(\"a\" = \"answers\"))",
        "> ",
        "  names(modifiedNodesST)[names(modifiedNodesST) == 'newAnswers'] <-  paste(originalNamesST[1], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodesST <- modifiedNodesST %>%",
        "+ ",
        "    left_join(nodesKeyStudentTeacherCategorical, by = c(\"b\" = \"answers\"))",
        "> ",
        "  names(modifiedNodesST)[names(modifiedNodesST) == 'newAnswers'] <-  paste(originalNamesST[2], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodesST <- modifiedNodesST %>%",
        "+ ",
        "    left_join(nodesKeyStudentTeacherCategorical, by = c(\"c\" = \"answers\"))",
        "> ",
        "  names(modifiedNodesST)[names(modifiedNodesST) == 'newAnswers'] <-  paste(originalNamesST[3], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodesST <- modifiedNodesST %>%",
        "+ ",
        "    left_join(nodesKeyStudentTeacherCategorical, by = c(\"d\" = \"answers\"))",
        "> ",
        "  names(modifiedNodesST)[names(modifiedNodesST) == 'newAnswers'] <-  paste(originalNamesST[4], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodesST <- modifiedNodesST %>%",
        "+ ",
        "    left_join(nodesKeyStudentTeacherCategorical, by = c(\"e\" = \"answers\"))",
        "> ",
        "  names(modifiedNodesST)[names(modifiedNodesST) == 'newAnswers'] <-  paste(originalNamesST[5], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodesST <- modifiedNodesST %>%",
        "+ ",
        "    left_join(nodesKeyStudentTeacherCategorical, by = c(\"f\" = \"answers\"))",
        "> ",
        "  names(modifiedNodesST)[names(modifiedNodesST) == 'newAnswers'] <-  paste(originalNamesST[6], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodesST <- modifiedNodesST %>%",
        "+ ",
        "    left_join(nodesKeyStudentTeacherCategorical, by = c(\"g\" = \"answers\"))",
        "> ",
        "  names(modifiedNodesST)[names(modifiedNodesST) == 'newAnswers'] <-  paste(originalNamesST[7], \"(stratified)\", sep = \".\")",
        "> ",
        "  modifiedNodesST <- modifiedNodesST[,8:ncol(modifiedNodesST)]",
        "> ",
        "  nodes <- cbind(nodes, modifiedNodesST)",
        "> ",
        "#make the numeric keypair dataframes from which to convert",
        "> ",
        "#relationship question answers",
        "> ",
        "  edgesKey <- keyToNumeric(scoreData = edges[,xxxxxxxxx],",
        "+ ",
        "                           answers = edgeAnswers,",
        "+ ",
        "                           normalized = TRUE)",
        "> ",
        "  #for each network question, bind a numeric column to edges data frames with",
        "> ",
        "  #numeric answers in, called 'Network'",
        "> ",
        "    numericReplacementVector <- makeResponseNumeric(data = edges1$Q2,",
        "+ ",
        "                                                    conversionKey = edgesKey)",
        "> ",
        "    numericReplacementColumn <- data.frame(numericReplacementVector)",
        "> ",
        "    names(numericReplacementColumn) <- \"Network\"",
        "> ",
        "    edges1 <- cbind(edges1, numericReplacementColumn)",
        "> ",
        "    numericReplacementVector <- makeResponseNumeric(data = edges2$Q3,",
        "+ ",
        "                                                    conversionKey = edgesKey)",
        "> ",
        "    numericReplacementColumn <- data.frame(numericReplacementVector)",
        "> ",
        "    names(numericReplacementColumn) <- \"Network\"",
        "> ",
        "    edges2 <- cbind(edges2, numericReplacementColumn)",
        "> ",
        "    numericReplacementVector <- makeResponseNumeric(data = edges3$Q4,",
        "+ ",
        "                                                    conversionKey = edgesKey)",
        "> ",
        "    numericReplacementColumn <- data.frame(numericReplacementVector)",
        "> ",
        "    names(numericReplacementColumn) <- \"Network\"",
        "> ",
        "    edges3 <- cbind(edges3, numericReplacementColumn)",
        "> ",
        "  #List network question data to enable looping over it",
        "> ",
        "    surveyData <- list(edges1, edges2, edges3)",
        "> ",
        "  #save a list containing the raw data for passing raw to the dash",
        "> ",
        "    rawEdgesList <- surveyData",
        "> ",
        "#Filter edges of each network question for most positive only    ",
        "> ",
        "    surveyDataFiltered <- list()",
        "> ",
        "    for(i in 1:length(surveyData)) {",
        "+ ",
        "      surveyDataFiltered[[i]] <- dplyr::filter(surveyData[[i]], ",
        "+ ",
        "                                               surveyData[[i]]$Network > ",
        "+ ",
        "                                               thresholdForEdgeDrawing)",
        "+ ",
        "  }",
        "> ",
        "#perform summative network analysis on each relationship question",
        "> ",
        "    source(\"networkSurveyAnalysis.R\")",
        "> ",
        "    totalNetworkInfo <- list()",
        "> ",
        "    for(i in 1:length(surveyDataFiltered)) {",
        "+ ",
        "    totalNetworkInfo[[length(totalNetworkInfo)+1]] <-",
        "+ ",
        "      surveyDataAnalysis(questionData = surveyDataFiltered[[i]])",
        "+ ",
        "    }   ",
        "> ",
        "#Insert HTML into a list to display it properly in-dash",
        "> ",
        "    formatDataForDisplay <- function(Data) {",
        "+ ",
        "      Data <- na.omit(Data)",
        "+ ",
        "      ogValue <- Data[length(Data)]",
        "+ ",
        "      formattedValue <- paste(Data, \"<br>\", sep=\" \")",
        "+ ",
        "      formattedValue[length(formattedValue)] <- ogValue",
        "+ ",
        "      return(formattedValue)",
        "+ ",
        "    }",
        "> ",
        "#find isolates",
        "> ",
        "  isolatesList <- list()",
        "> ",
        "  for(i in 1:length(totalNetworkInfo)) {",
        "+ ",
        "    isolatesList[[i]] <- nodes$Name [!(nodes$Name %in%",
        "+ ",
        "                                         totalNetworkInfo[[i]][[3]][[\"People\"]])]",
        "+ ",
        "    isolatesList[[i]][isolatesList[[i]] == \"\"] <- NA",
        "+ ",
        "  }",
        "> ",
        "#format isolates list for display in dash, or display 'None'",
        "> ",
        "  for(i in 1:length(isolatesList)) {",
        "+ ",
        "    if(length(isolatesList[[i]])>0) {",
        "+ ",
        "      isolatesList[[i]] <- formatDataForDisplay(isolatesList[[i]])",
        "+ ",
        "    } else {",
        "+ ",
        "      isolatesList[[i]] <- \"None\"",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "#Prepare data for D3.JS forceDirected",
        "> ",
        "  SSNQGraphList <- list()",
        "> ",
        "  SSNQCommunitiesDataList <- list()",
        "> ",
        "  SSNQMembersList <- list()",
        "> ",
        "  Graph2 <- list()",
        "> ",
        "  for (i in 1:length(surveyDataFiltered)) {",
        "+ ",
        "    SSNQGraphFromDataset <- data.frame(",
        "+ ",
        "      surveyDataFiltered[[i]]$Source,",
        "+ ",
        "      surveyDataFiltered[[i]]$Target,",
        "+ ",
        "      ... = surveyDataFiltered[[i]]$Network)",
        "+ ",
        "    #Make an igraph object for each question for the D3 R port.",
        "+ ",
        "    Graph2[[i]] <- SSNQGraphFromDataset",
        "+ ",
        "    SSNQGraphList[[i]] <- graph_from_data_frame(SSNQGraphFromDataset,",
        "+ ",
        "                                                directed = T)",
        "+ ",
        "    # Perform Communities Analysis for each igraph object",
        "+ ",
        "    SSNQCommunitiesDataList[[i]] <- cluster_walktrap(SSNQGraphList[[i]])",
        "+ ",
        "    ",
        "+ ",
        "    SSNQMembersList[[i]] <- membership(SSNQCommunitiesDataList[[i]])",
        "+ ",
        "  }",
        "> ",
        "    #Convert igraph to D3",
        "> ",
        "  SSNQNetworkD3 <- list()",
        "> ",
        "  for(i in 1:length(SSNQGraphList)) {",
        "+ ",
        "    SSNQNetworkD3[[i]] <- igraph_to_networkD3(SSNQGraphList[[i]],",
        "+ ",
        "                                              group = SSNQMembersList[[i]])",
        "+ ",
        "  }",
        "> ",
        "    #Set up the edge data for porting to D3.JS",
        "> ",
        "    edgeDataSetup <- function(SSNQGraph) {",
        "+ ",
        "    #Find every co-occuring join and assign each 2, while the others are assigned 1",
        "+ ",
        "      x <- SSNQGraph",
        "+ ",
        "      colnamesx <- colnames(x)",
        "+ ",
        "      for(l in 1:length(colnamesx)) {",
        "+ ",
        "        if(colnamesx[[l]] == \"...\") {",
        "+ ",
        "          colnamesx[[l]] <- \"scoreStrength\"",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "      colnames(x) <- colnamesx",
        "+ ",
        "      #find the second instance of each duplication and assign it TRUE",
        "+ ",
        "      duplicates <- duplicated(t(apply(x[,1:2], 1, sort)))",
        "+ ",
        "      x <- cbind(x, duplicates = duplicates)",
        "+ ",
        "      #split between true and false and search for the mutual partners in z, then use",
        "+ ",
        "      # these to change x",
        "+ ",
        "      y <- filter(as_tibble(x), duplicates == TRUE)",
        "+ ",
        "      z <- filter(as_tibble(x), duplicates == FALSE)",
        "+ ",
        "      y <- y[,c(2,1,3,4)]",
        "+ ",
        "      colnames(y) <- colnames(x)",
        "+ ",
        "      a <- inner_join(z[,1:2],y[,1:2])",
        "+ ",
        "      x <- as_tibble(x)",
        "+ ",
        "      for (k in 1:nrow(a)) {",
        "+ ",
        "        for (j in 1:nrow(x)) {",
        "+ ",
        "          if (identical(x[j,1:2], a[k,1:2])) {",
        "+ ",
        "            x[j,4] <- TRUE",
        "+ ",
        "            x[j,3] <- x[j,3]+1",
        "+ ",
        "          }",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "      #reorder x to suit D3.JS port formatting of source, target, mutual, score",
        "+ ",
        "      x <- x[,c(1,2,4,3)]",
        "+ ",
        "      colnames(x) <- c(\"source\", \"target\", \"mutual\", \"score\")",
        "+ ",
        "      ",
        "+ ",
        "      cols <- sapply(x, is.logical)",
        "+ ",
        "      x[,cols] <- lapply(x[,cols], as.numeric)",
        "+ ",
        "      for(m in 1:nrow(x[,3])) {",
        "+ ",
        "        x[m,3] <- x[m,3]+1",
        "+ ",
        "      }",
        "+ ",
        "      #reassign x to the original variable",
        "+ ",
        "      return(x)",
        "+ ",
        "    }",
        "> ",
        "    edgeDataList <- list()",
        "> ",
        "    thing <- SSNQGraphList[[1]]",
        "> ",
        "    edgeDataList[[1]] <- edgeDataSetup(Graph2[[1]])",
        "\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n",
        "> ",
        "    edgeDataList[[2]] <- edgeDataSetup(Graph2[[2]])    ",
        "\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n",
        "> ",
        "    edgeDataList[[3]] <- edgeDataSetup(Graph2[[3]])",
        "\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n",
        "> ",
        "    #attempt to build overall network from unfiltered data",
        "> ",
        "    overallEdgeList <- list()",
        "> ",
        "    for(i in 1:length(rawEdgesList)){",
        "+ ",
        "      overallEdgeList[[i]] <- rawEdgesList[[i]][c(\"Source\", \"Target\", \"Network\")]",
        "+ ",
        "    }",
        "> ",
        "    overallEdgesList <- do.call(\"rbind\", overallEdgeList)",
        "> ",
        "    overallEdgesList$Score <- rep(1, nrow(overallEdgesList))",
        "> ",
        "    # Reorder values in first 2 cols and cbind with df[,3]",
        "> ",
        "    m <- cbind(t(apply(overallEdgesList[1:2], 1, sort)), overallEdgesList[,3])",
        "> ",
        "    # Sum third column grouped by first and second column",
        "> ",
        "    aggregate(as.numeric(m[,3]), by = list(m[,1],m[,2]),FUN=sum)",
        "            Group.1          Group.2   x\n1  Alexander Durbin Alexander Durbin 3.0\n2  Alexander Durbin  Arjun Chiluveru 3.8\n3   Arjun Chiluveru  Arjun Chiluveru 3.0\n4  Alexander Durbin    Ethan McInnes 4.2\n5   Arjun Chiluveru    Ethan McInnes 3.0\n6     Ethan McInnes    Ethan McInnes 3.0\n7  Alexander Durbin     Joseph Zhang 2.0\n8   Arjun Chiluveru     Joseph Zhang 3.0\n9     Ethan McInnes     Joseph Zhang 1.4\n10     Joseph Zhang     Joseph Zhang 3.0\n11 Alexander Durbin  Marko Davidovic 5.2\n12  Arjun Chiluveru  Marko Davidovic",
        " 3.6\n13    Ethan McInnes  Marko Davidovic 3.0\n14     Joseph Zhang  Marko Davidovic 4.6\n15 Alexander Durbin    Markus Jensen 3.8\n16  Arjun Chiluveru    Markus Jensen 3.2\n17    Ethan McInnes    Markus Jensen 3.8\n18     Joseph Zhang    Markus Jensen 2.2\n19  Marko Davidovic    Markus Jensen 4.4\n20    Markus Jensen    Markus Jensen 3.0\n21 Alexander Durbin   Oliver Criddle 2.6\n22  Arjun Chiluveru   Oliver Criddle 5.0\n23    Ethan McInnes   Oliver Criddle 3.2\n24     Joseph Zhang   Oliver Criddle 5.0\n25  Marko Davidovic",
        "   Oliver Criddle 3.4\n26    Markus Jensen   Oliver Criddle 2.8\n27   Oliver Criddle   Oliver Criddle 3.0\n28 Alexander Durbin     Saxon Taylor 4.4\n29  Arjun Chiluveru     Saxon Taylor 2.8\n30    Ethan McInnes     Saxon Taylor 2.8\n31     Joseph Zhang     Saxon Taylor 2.4\n32  Marko Davidovic     Saxon Taylor 2.0\n33    Markus Jensen     Saxon Taylor 4.6\n34   Oliver Criddle     Saxon Taylor 2.4\n35     Saxon Taylor     Saxon Taylor 3.0\n36 Alexander Durbin Theodore Karelas 3.2\n37  Arjun Chiluveru Theodore Karelas 3.6",
        "\n38    Ethan McInnes Theodore Karelas 2.6\n39     Joseph Zhang Theodore Karelas 3.2\n40  Marko Davidovic Theodore Karelas 6.0\n41    Markus Jensen Theodore Karelas 4.2\n42   Oliver Criddle Theodore Karelas 2.8\n43     Saxon Taylor Theodore Karelas 4.6\n44 Theodore Karelas Theodore Karelas 3.0\n45 Alexander Durbin       Tom Lennox 2.6\n46  Arjun Chiluveru       Tom Lennox 2.8\n47    Ethan McInnes       Tom Lennox 1.2\n48     Joseph Zhang       Tom Lennox 2.4\n49  Marko Davidovic       Tom Lennox 2.0\n50    Markus Jensen",
        "       Tom Lennox 3.4\n51   Oliver Criddle       Tom Lennox 0.6\n52     Saxon Taylor       Tom Lennox 6.0\n53 Theodore Karelas       Tom Lennox 5.4\n54       Tom Lennox       Tom Lennox 3.0\n55 Alexander Durbin      Xavier Gray 5.8\n56  Arjun Chiluveru      Xavier Gray 3.4\n57    Ethan McInnes      Xavier Gray 4.8\n58     Joseph Zhang      Xavier Gray 2.2\n59  Marko Davidovic      Xavier Gray 4.2\n60    Markus Jensen      Xavier Gray 6.0\n61   Oliver Criddle      Xavier Gray 3.6\n62     Saxon Taylor      Xavier Gray 3.2",
        "\n63 Theodore Karelas      Xavier Gray 3.6\n64       Tom Lennox      Xavier Gray 3.6\n65      Xavier Gray      Xavier Gray 3.0\n",
        "> ",
        "    overallEdgesList<- m",
        "> ",
        "    # Sum third column grouped by first and second column",
        "> ",
        "    overallSSEdgesList <- aggregate(as.numeric(m[,3]), by = list(m[,1],m[,2]),FUN=sum)",
        "> ",
        "overallSSEdgesList",
        "            Group.1          Group.2   x\n1  Alexander Durbin Alexander Durbin 3.0\n2  Alexander Durbin  Arjun Chiluveru 3.8\n3   Arjun Chiluveru  Arjun Chiluveru 3.0\n4  Alexander Durbin    Ethan McInnes 4.2\n5   Arjun Chiluveru    Ethan McInnes 3.0\n6     Ethan McInnes    Ethan McInnes 3.0\n7  Alexander Durbin     Joseph Zhang 2.0\n8   Arjun Chiluveru     Joseph Zhang 3.0\n9     Ethan McInnes     Joseph Zhang 1.4\n10     Joseph Zhang     Joseph Zhang 3.0\n11 Alexander Durbin  Marko Davidovic 5.2\n12  Arjun Chiluveru  Marko Davidovic",
        " 3.6\n13    Ethan McInnes  Marko Davidovic 3.0\n14     Joseph Zhang  Marko Davidovic 4.6\n15 Alexander Durbin    Markus Jensen 3.8\n16  Arjun Chiluveru    Markus Jensen 3.2\n17    Ethan McInnes    Markus Jensen 3.8\n18     Joseph Zhang    Markus Jensen 2.2\n19  Marko Davidovic    Markus Jensen 4.4\n20    Markus Jensen    Markus Jensen 3.0\n21 Alexander Durbin   Oliver Criddle 2.6\n22  Arjun Chiluveru   Oliver Criddle 5.0\n23    Ethan McInnes   Oliver Criddle 3.2\n24     Joseph Zhang   Oliver Criddle 5.0\n25  Marko Davidovic",
        "   Oliver Criddle 3.4\n26    Markus Jensen   Oliver Criddle 2.8\n27   Oliver Criddle   Oliver Criddle 3.0\n28 Alexander Durbin     Saxon Taylor 4.4\n29  Arjun Chiluveru     Saxon Taylor 2.8\n30    Ethan McInnes     Saxon Taylor 2.8\n31     Joseph Zhang     Saxon Taylor 2.4\n32  Marko Davidovic     Saxon Taylor 2.0\n33    Markus Jensen     Saxon Taylor 4.6\n34   Oliver Criddle     Saxon Taylor 2.4\n35     Saxon Taylor     Saxon Taylor 3.0\n36 Alexander Durbin Theodore Karelas 3.2\n37  Arjun Chiluveru Theodore Karelas 3.6",
        "\n38    Ethan McInnes Theodore Karelas 2.6\n39     Joseph Zhang Theodore Karelas 3.2\n40  Marko Davidovic Theodore Karelas 6.0\n41    Markus Jensen Theodore Karelas 4.2\n42   Oliver Criddle Theodore Karelas 2.8\n43     Saxon Taylor Theodore Karelas 4.6\n44 Theodore Karelas Theodore Karelas 3.0\n45 Alexander Durbin       Tom Lennox 2.6\n46  Arjun Chiluveru       Tom Lennox 2.8\n47    Ethan McInnes       Tom Lennox 1.2\n48     Joseph Zhang       Tom Lennox 2.4\n49  Marko Davidovic       Tom Lennox 2.0\n50    Markus Jensen",
        "       Tom Lennox 3.4\n51   Oliver Criddle       Tom Lennox 0.6\n52     Saxon Taylor       Tom Lennox 6.0\n53 Theodore Karelas       Tom Lennox 5.4\n54       Tom Lennox       Tom Lennox 3.0\n55 Alexander Durbin      Xavier Gray 5.8\n56  Arjun Chiluveru      Xavier Gray 3.4\n57    Ethan McInnes      Xavier Gray 4.8\n58     Joseph Zhang      Xavier Gray 2.2\n59  Marko Davidovic      Xavier Gray 4.2\n60    Markus Jensen      Xavier Gray 6.0\n61   Oliver Criddle      Xavier Gray 3.6\n62     Saxon Taylor      Xavier Gray 3.2",
        "\n63 Theodore Karelas      Xavier Gray 3.6\n64       Tom Lennox      Xavier Gray 3.6\n65      Xavier Gray      Xavier Gray 3.0\n",
        "> ",
        "    overallSSEdgesList <- edgeDataSetup(overallSSEdgesList)",
        "\u001B[38;5;252mJoining, by = c(\"Group.1\", \"Group.2\")\u001B[39m\n",
        "> ",
        "overallSSEdgesList",
        "\u001B[38;5;246m# A tibble: 65 × 4\u001B[39m\n   source           target           mutual score\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m             \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m Alexander Durbin Alexander Durbin      1   3  \n\u001B[38;5;250m 2\u001B[39m Alexander Durbin Arjun Chiluveru       1   3.8\n\u001B[38;5;250m 3\u001B[39m Arjun Chiluveru  Arjun Chiluveru       1   3  \n\u001B[38;5;250m 4\u001B[39m Alexander Durbin Ethan McInnes         1   4.2\n\u001B[38;5;250m 5\u001B[39m Arjun Chiluveru  Ethan McInnes         1   3  \n",
        "\u001B[38;5;250m 6\u001B[39m Ethan McInnes    Ethan McInnes         1   3  \n\u001B[38;5;250m 7\u001B[39m Alexander Durbin Joseph Zhang          1   2  \n\u001B[38;5;250m 8\u001B[39m Arjun Chiluveru  Joseph Zhang          1   3  \n\u001B[38;5;250m 9\u001B[39m Ethan McInnes    Joseph Zhang          1   1.4\n\u001B[38;5;250m10\u001B[39m Joseph Zhang     Joseph Zhang          1   3  \n\u001B[38;5;246m# … with 55 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "print(overallSSEdgesList(n=100))",
        "Error in overallSSEdgesList(n = 100) : \n  could not find function \"overallSSEdgesList\"\n",
        "> ",
        "View(overallSSEdgesList)",
        "> ",
        "    # Sum third column grouped by first and second column",
        "> ",
        "    overallSSEdgesDF <- aggregate(as.numeric(m[,3]), by = list(m[,1],m[,2]),FUN=sum)",
        "> ",
        "    overallSSEdgesDF <- edgeDataSetup(overallSSEdgesDF)",
        "\u001B[38;5;252mJoining, by = c(\"Group.1\", \"Group.2\")\u001B[39m\n",
        "> ",
        "    for(i in 1:nrow(overallSSEdgesDF)) {",
        "+ ",
        "      if(overallSSEdgesDF[i,\"score\"]>3){",
        "+ ",
        "        overallSSEdgesDF[i,\"mutual\"]<- 2",
        "+ ",
        "      }",
        "+ ",
        "        overallSSEdgesDF[i,\"mutual\"]",
        "+ ",
        "    }",
        "> ",
        "View(overallSSEdgesDF)",
        "> ",
        "    overallEdgesList <- do.call(\"rbind\", overallEdgeList)",
        "> ",
        "    overallEdgesList$Score <- rep(1, nrow(overallEdgesList))",
        "> ",
        "    #filter entries under a given score threshold 0.5 ",
        "> ",
        "    overallEdgesList <- filter(overallEdgesList, score < 0.5)",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`filter()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Problem while computing `..1 = score < 0.5`.\u001B[39m\n\u001B[1mCaused by error in \u001B[38;5;252m`mask$eval_all_filter()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m object 'score' not found\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_error()\u0007rlang::last_error()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "names(overallEdgesList)",
        "[1] \"Source\"  \"Target\"  \"Network\" \"Score\"  \n",
        "> ",
        "    #filter entries under a given score threshold 0.5 ",
        "> ",
        "    overallEdgesList <- filter(overallEdgesList, Score < 0.5)",
        "> ",
        "    # Reorder values in first 2 cols and cbind with df[,3]",
        "> ",
        "    m <- cbind(t(apply(overallEdgesList[1:2], 1, sort)), overallEdgesList[,3])",
        "> ",
        "    # Sum third column grouped by first and second column",
        "> ",
        "    overallSSEdgesDF <- aggregate(as.numeric(m[,3]), by = list(m[,1],m[,2]),FUN=sum)",
        "Error in m[, 3] : subscript out of bounds\n",
        "> ",
        "names(m)",
        "NULL\n",
        "> ",
        "    overallEdgesList <- do.call(\"rbind\", overallEdgeList)",
        "> ",
        "    overallEdgesList$Score <- rep(1, nrow(overallEdgesList))",
        "> ",
        "    #filter entries under a given score threshold 0.5 ",
        "> ",
        "    overallEdgesList <- filter(overallEdgesList, Score < 0.5)",
        "> ",
        "    # Reorder values in first 2 cols and cbind with df[,3]",
        "> ",
        "    m <- cbind(t(apply(overallEdgesList[1:2], 1, sort)), overallEdgesList[,3])",
        "> ",
        "m",
        "    \n[1,]\n",
        "> ",
        "overallEdgesList",
        "[1] Source  Target  Network Score  \n<0 rows> (or 0-length row.names)\n",
        "> ",
        "    overallEdgesList <- do.call(\"rbind\", overallEdgeList)",
        "> ",
        "    overallEdgesList$Score <- rep(1, nrow(overallEdgesList))",
        "> ",
        "overallEdgesList",
        "              Source           Target Network Score\n1   Alexander Durbin Alexander Durbin     1.0     1\n2   Alexander Durbin  Arjun Chiluveru     0.8     1\n3   Alexander Durbin    Ethan McInnes     0.8     1\n4   Alexander Durbin     Joseph Zhang     0.8     1\n5   Alexander Durbin  Marko Davidovic     1.0     1\n6   Alexander Durbin    Markus Jensen     0.8     1\n7   Alexander Durbin   Oliver Criddle     0.4     1\n8   Alexander Durbin     Saxon Taylor     0.8     1\n9   Alexander Durbin Theodore Karelas     0.6",
        "     1\n10  Alexander Durbin       Tom Lennox     0.8     1\n11  Alexander Durbin      Xavier Gray     1.0     1\n12  Theodore Karelas Alexander Durbin     0.4     1\n13  Theodore Karelas  Arjun Chiluveru     0.6     1\n14  Theodore Karelas    Ethan McInnes     0.4     1\n15  Theodore Karelas     Joseph Zhang     0.4     1\n16  Theodore Karelas  Marko Davidovic     1.0     1\n17  Theodore Karelas    Markus Jensen     0.8     1\n18  Theodore Karelas   Oliver Criddle     0.4     1\n19  Theodore Karelas     Saxon Taylor",
        "     0.6     1\n20  Theodore Karelas Theodore Karelas     1.0     1\n21  Theodore Karelas       Tom Lennox     0.8     1\n22  Theodore Karelas      Xavier Gray     0.6     1\n23   Arjun Chiluveru Alexander Durbin     0.6     1\n24   Arjun Chiluveru  Arjun Chiluveru     1.0     1\n25   Arjun Chiluveru    Ethan McInnes     0.6     1\n26   Arjun Chiluveru     Joseph Zhang     0.6     1\n27   Arjun Chiluveru  Marko Davidovic     0.2     1\n28   Arjun Chiluveru    Markus Jensen     0.6     1\n29   Arjun Chiluveru   Oliver Criddle",
        "     1.0     1\n30   Arjun Chiluveru     Saxon Taylor     0.8     1\n31   Arjun Chiluveru Theodore Karelas     0.6     1\n32   Arjun Chiluveru       Tom Lennox     0.6     1\n33   Arjun Chiluveru      Xavier Gray     0.6     1\n34    Oliver Criddle Alexander Durbin     0.2     1\n35    Oliver Criddle  Arjun Chiluveru     0.6     1\n36    Oliver Criddle    Ethan McInnes     0.4     1\n37    Oliver Criddle     Joseph Zhang     0.8     1\n38    Oliver Criddle  Marko Davidovic     0.2     1\n39    Oliver Criddle    Markus Jensen",
        "     0.4     1\n40    Oliver Criddle   Oliver Criddle     1.0     1\n41    Oliver Criddle     Saxon Taylor     0.4     1\n42    Oliver Criddle Theodore Karelas     0.2     1\n43    Oliver Criddle       Tom Lennox     0.0     1\n44    Oliver Criddle      Xavier Gray     0.4     1\n45      Saxon Taylor Alexander Durbin     0.6     1\n46      Saxon Taylor  Arjun Chiluveru     0.4     1\n47      Saxon Taylor    Ethan McInnes     0.6     1\n48      Saxon Taylor     Joseph Zhang     0.4     1\n49      Saxon Taylor  Marko Davidovic",
        "     0.0     1\n50      Saxon Taylor    Markus Jensen     0.8     1\n51      Saxon Taylor   Oliver Criddle     0.2     1\n52      Saxon Taylor     Saxon Taylor     1.0     1\n53      Saxon Taylor Theodore Karelas     1.0     1\n54      Saxon Taylor       Tom Lennox     1.0     1\n55      Saxon Taylor      Xavier Gray     0.8     1\n56   Marko Davidovic Alexander Durbin     0.8     1\n57   Marko Davidovic  Arjun Chiluveru     1.0     1\n58   Marko Davidovic    Ethan McInnes     0.8     1\n59   Marko Davidovic     Joseph Zhang",
        "     1.0     1\n60   Marko Davidovic    Markus Jensen     0.8     1\n61   Marko Davidovic   Oliver Criddle     0.8     1\n62   Marko Davidovic     Saxon Taylor     0.8     1\n63   Marko Davidovic Theodore Karelas     1.0     1\n64   Marko Davidovic       Tom Lennox     0.8     1\n65   Marko Davidovic      Xavier Gray     0.8     1\n66       Xavier Gray Alexander Durbin     1.0     1\n67       Xavier Gray  Arjun Chiluveru     0.6     1\n68       Xavier Gray    Ethan McInnes     1.0     1\n69       Xavier Gray     Joseph Zhang",
        "     0.4     1\n70       Xavier Gray  Marko Davidovic     0.6     1\n71       Xavier Gray    Markus Jensen     1.0     1\n72       Xavier Gray   Oliver Criddle     0.8     1\n73       Xavier Gray     Saxon Taylor     0.6     1\n74       Xavier Gray Theodore Karelas     0.6     1\n75       Xavier Gray       Tom Lennox     0.8     1\n76       Xavier Gray      Xavier Gray     1.0     1\n77     Markus Jensen Alexander Durbin     0.6     1\n78     Markus Jensen  Arjun Chiluveru     0.6     1\n79     Markus Jensen    Ethan McInnes",
        "     0.8     1\n80     Markus Jensen     Joseph Zhang     0.4     1\n81     Markus Jensen  Marko Davidovic     0.6     1\n82     Markus Jensen    Markus Jensen     1.0     1\n83     Markus Jensen   Oliver Criddle     0.4     1\n84     Markus Jensen     Saxon Taylor     0.8     1\n85     Markus Jensen Theodore Karelas     0.8     1\n86     Markus Jensen       Tom Lennox     0.8     1\n87     Markus Jensen      Xavier Gray     1.0     1\n88        Tom Lennox Alexander Durbin     0.2     1\n89        Tom Lennox  Arjun Chiluveru",
        "     0.2     1\n90        Tom Lennox    Ethan McInnes     0.2     1\n91        Tom Lennox     Joseph Zhang     0.2     1\n92        Tom Lennox  Marko Davidovic     0.0     1\n93        Tom Lennox    Markus Jensen     0.6     1\n94        Tom Lennox   Oliver Criddle     0.0     1\n95        Tom Lennox     Saxon Taylor     1.0     1\n96        Tom Lennox Theodore Karelas     1.0     1\n97        Tom Lennox       Tom Lennox     1.0     1\n98        Tom Lennox      Xavier Gray     0.6     1\n99     Ethan McInnes Alexander Durbin",
        "     0.6     1\n100    Ethan McInnes  Arjun Chiluveru     0.4     1\n101    Ethan McInnes    Ethan McInnes     1.0     1\n102    Ethan McInnes     Joseph Zhang     0.4     1\n103    Ethan McInnes  Marko Davidovic     0.2     1\n104    Ethan McInnes    Markus Jensen     0.6     1\n105    Ethan McInnes   Oliver Criddle     0.6     1\n106    Ethan McInnes     Saxon Taylor     0.2     1\n107    Ethan McInnes Theodore Karelas     0.2     1\n108    Ethan McInnes       Tom Lennox     0.2     1\n109    Ethan McInnes      Xavier Gray",
        "     0.6     1\n110     Joseph Zhang Alexander Durbin     0.0     1\n111     Joseph Zhang  Arjun Chiluveru     0.6     1\n112     Joseph Zhang    Ethan McInnes     0.2     1\n113     Joseph Zhang     Joseph Zhang     1.0     1\n114     Joseph Zhang  Marko Davidovic     0.8     1\n115     Joseph Zhang    Markus Jensen     0.4     1\n116     Joseph Zhang   Oliver Criddle     0.8     1\n117     Joseph Zhang     Saxon Taylor     0.6     1\n118     Joseph Zhang Theodore Karelas     0.6     1\n119     Joseph Zhang       Tom Lennox",
        "     0.8     1\n120     Joseph Zhang      Xavier Gray     0.6     1\n121 Alexander Durbin Alexander Durbin     1.0     1\n122 Alexander Durbin  Arjun Chiluveru     0.6     1\n123 Alexander Durbin    Ethan McInnes     0.6     1\n124 Alexander Durbin     Joseph Zhang     0.4     1\n125 Alexander Durbin  Marko Davidovic     0.8     1\n126 Alexander Durbin    Markus Jensen     0.6     1\n127 Alexander Durbin   Oliver Criddle     0.6     1\n128 Alexander Durbin     Saxon Taylor     0.8     1\n129 Alexander Durbin Theodore Karelas",
        "     0.4     1\n130 Alexander Durbin       Tom Lennox     0.4     1\n131 Alexander Durbin      Xavier Gray     0.8     1\n132 Theodore Karelas Alexander Durbin     0.2     1\n133 Theodore Karelas  Arjun Chiluveru     0.4     1\n134 Theodore Karelas    Ethan McInnes     0.4     1\n135 Theodore Karelas     Joseph Zhang     0.2     1\n136 Theodore Karelas  Marko Davidovic     1.0     1\n137 Theodore Karelas    Markus Jensen     0.6     1\n138 Theodore Karelas   Oliver Criddle     0.6     1\n139 Theodore Karelas     Saxon Taylor",
        "     0.6     1\n140 Theodore Karelas Theodore Karelas     1.0     1\n141 Theodore Karelas       Tom Lennox     0.8     1\n142 Theodore Karelas      Xavier Gray     0.6     1\n143  Arjun Chiluveru Alexander Durbin     0.4     1\n144  Arjun Chiluveru  Arjun Chiluveru     1.0     1\n145  Arjun Chiluveru    Ethan McInnes     0.4     1\n146  Arjun Chiluveru     Joseph Zhang     0.4     1\n147  Arjun Chiluveru  Marko Davidovic     0.6     1\n148  Arjun Chiluveru    Markus Jensen     0.4     1\n149  Arjun Chiluveru   Oliver Criddle",
        "     1.0     1\n150  Arjun Chiluveru     Saxon Taylor     0.4     1\n151  Arjun Chiluveru Theodore Karelas     0.4     1\n152  Arjun Chiluveru       Tom Lennox     0.4     1\n153  Arjun Chiluveru      Xavier Gray     0.6     1\n154   Oliver Criddle Alexander Durbin     0.2     1\n155   Oliver Criddle  Arjun Chiluveru     0.6     1\n156   Oliver Criddle    Ethan McInnes     0.6     1\n157   Oliver Criddle     Joseph Zhang     0.8     1\n158   Oliver Criddle  Marko Davidovic     0.6     1\n159   Oliver Criddle    Markus Jensen",
        "     0.8     1\n160   Oliver Criddle   Oliver Criddle     1.0     1\n161   Oliver Criddle     Saxon Taylor     0.4     1\n162   Oliver Criddle Theodore Karelas     0.6     1\n163   Oliver Criddle       Tom Lennox     0.2     1\n164   Oliver Criddle      Xavier Gray     0.8     1\n165     Saxon Taylor Alexander Durbin     0.6     1\n166     Saxon Taylor  Arjun Chiluveru     0.2     1\n167     Saxon Taylor    Ethan McInnes     0.6     1\n168     Saxon Taylor     Joseph Zhang     0.0     1\n169     Saxon Taylor  Marko Davidovic",
        "     0.0     1\n170     Saxon Taylor    Markus Jensen     0.8     1\n171     Saxon Taylor   Oliver Criddle     0.4     1\n172     Saxon Taylor     Saxon Taylor     1.0     1\n173     Saxon Taylor Theodore Karelas     0.8     1\n174     Saxon Taylor       Tom Lennox     1.0     1\n175     Saxon Taylor      Xavier Gray     0.6     1\n176  Marko Davidovic Alexander Durbin     0.8     1\n177  Marko Davidovic  Arjun Chiluveru     0.8     1\n178  Marko Davidovic    Ethan McInnes     0.4     1\n179  Marko Davidovic     Joseph Zhang",
        "     0.6     1\n180  Marko Davidovic    Markus Jensen     0.8     1\n181  Marko Davidovic   Oliver Criddle     0.4     1\n182  Marko Davidovic     Saxon Taylor     0.6     1\n183  Marko Davidovic Theodore Karelas     1.0     1\n184  Marko Davidovic       Tom Lennox     0.4     1\n185  Marko Davidovic      Xavier Gray     0.6     1\n186      Xavier Gray Alexander Durbin     1.0     1\n187      Xavier Gray  Arjun Chiluveru     0.0     1\n188      Xavier Gray    Ethan McInnes     1.0     1\n189      Xavier Gray     Joseph Zhang",
        "     0.0     1\n190      Xavier Gray  Marko Davidovic     0.6     1\n191      Xavier Gray    Markus Jensen     1.0     1\n192      Xavier Gray   Oliver Criddle     0.0     1\n193      Xavier Gray     Saxon Taylor     0.0     1\n194      Xavier Gray Theodore Karelas     0.2     1\n195      Xavier Gray       Tom Lennox     0.2     1\n196      Xavier Gray      Xavier Gray     1.0     1\n197    Markus Jensen Alexander Durbin     0.4     1\n198    Markus Jensen  Arjun Chiluveru     0.4     1\n199    Markus Jensen    Ethan McInnes",
        "     0.6     1\n200    Markus Jensen     Joseph Zhang     0.0     1\n201    Markus Jensen  Marko Davidovic     0.8     1\n202    Markus Jensen    Markus Jensen     1.0     1\n203    Markus Jensen   Oliver Criddle     0.6     1\n204    Markus Jensen     Saxon Taylor     0.8     1\n205    Markus Jensen Theodore Karelas     0.6     1\n206    Markus Jensen       Tom Lennox     0.6     1\n207    Markus Jensen      Xavier Gray     1.0     1\n208       Tom Lennox Alexander Durbin     0.2     1\n209       Tom Lennox  Arjun Chiluveru",
        "     0.2     1\n210       Tom Lennox    Ethan McInnes     0.0     1\n211       Tom Lennox     Joseph Zhang     0.0     1\n212       Tom Lennox  Marko Davidovic     0.2     1\n213       Tom Lennox    Markus Jensen     0.2     1\n214       Tom Lennox   Oliver Criddle     0.0     1\n215       Tom Lennox     Saxon Taylor     1.0     1\n216       Tom Lennox Theodore Karelas     1.0     1\n217       Tom Lennox       Tom Lennox     1.0     1\n218       Tom Lennox      Xavier Gray     0.4     1\n219    Ethan McInnes Alexander Durbin",
        "     0.4     1\n220    Ethan McInnes  Arjun Chiluveru     0.2     1\n221    Ethan McInnes    Ethan McInnes     1.0     1\n222    Ethan McInnes     Joseph Zhang     0.2     1\n223    Ethan McInnes  Marko Davidovic     0.2     1\n224    Ethan McInnes    Markus Jensen     0.6     1\n225    Ethan McInnes   Oliver Criddle     0.2     1\n226    Ethan McInnes     Saxon Taylor     0.2     1\n227    Ethan McInnes Theodore Karelas     0.2     1\n228    Ethan McInnes       Tom Lennox     0.2     1\n229    Ethan McInnes      Xavier Gray",
        "     0.8     1\n230     Joseph Zhang Alexander Durbin     0.0     1\n231     Joseph Zhang  Arjun Chiluveru     0.2     1\n232     Joseph Zhang    Ethan McInnes     0.0     1\n233     Joseph Zhang     Joseph Zhang     1.0     1\n234     Joseph Zhang  Marko Davidovic     0.6     1\n235     Joseph Zhang    Markus Jensen     0.4     1\n236     Joseph Zhang   Oliver Criddle     0.8     1\n237     Joseph Zhang     Saxon Taylor     0.6     1\n238     Joseph Zhang Theodore Karelas     0.6     1\n239     Joseph Zhang       Tom Lennox",
        "     0.6     1\n240     Joseph Zhang      Xavier Gray     0.8     1\n241 Alexander Durbin Alexander Durbin     1.0     1\n242 Alexander Durbin  Arjun Chiluveru     0.8     1\n243 Alexander Durbin    Ethan McInnes     1.0     1\n244 Alexander Durbin     Joseph Zhang     0.8     1\n245 Alexander Durbin  Marko Davidovic     1.0     1\n246 Alexander Durbin    Markus Jensen     0.8     1\n247 Alexander Durbin   Oliver Criddle     0.6     1\n248 Alexander Durbin     Saxon Taylor     1.0     1\n249 Alexander Durbin Theodore Karelas",
        "     0.8     1\n250 Alexander Durbin       Tom Lennox     0.8     1\n [ reached 'max' / getOption(\"max.print\") -- omitted 109 rows ]\n",
        "> ",
        "    #filter entries under a given score threshold 0.5 ",
        "> ",
        "    overallEdgesList <- filter(overallEdgesList, Network < 0.5)",
        "> ",
        "    #filter entries under a given score threshold 0.5 ",
        "> ",
        "    overallEdgesList",
        "              Source           Target Network Score\n1   Alexander Durbin   Oliver Criddle     0.4     1\n2   Theodore Karelas Alexander Durbin     0.4     1\n3   Theodore Karelas    Ethan McInnes     0.4     1\n4   Theodore Karelas     Joseph Zhang     0.4     1\n5   Theodore Karelas   Oliver Criddle     0.4     1\n6    Arjun Chiluveru  Marko Davidovic     0.2     1\n7     Oliver Criddle Alexander Durbin     0.2     1\n8     Oliver Criddle    Ethan McInnes     0.4     1\n9     Oliver Criddle  Marko Davidovic     0.2",
        "     1\n10    Oliver Criddle    Markus Jensen     0.4     1\n11    Oliver Criddle     Saxon Taylor     0.4     1\n12    Oliver Criddle Theodore Karelas     0.2     1\n13    Oliver Criddle       Tom Lennox     0.0     1\n14    Oliver Criddle      Xavier Gray     0.4     1\n15      Saxon Taylor  Arjun Chiluveru     0.4     1\n16      Saxon Taylor     Joseph Zhang     0.4     1\n17      Saxon Taylor  Marko Davidovic     0.0     1\n18      Saxon Taylor   Oliver Criddle     0.2     1\n19       Xavier Gray     Joseph Zhang",
        "     0.4     1\n20     Markus Jensen     Joseph Zhang     0.4     1\n21     Markus Jensen   Oliver Criddle     0.4     1\n22        Tom Lennox Alexander Durbin     0.2     1\n23        Tom Lennox  Arjun Chiluveru     0.2     1\n24        Tom Lennox    Ethan McInnes     0.2     1\n25        Tom Lennox     Joseph Zhang     0.2     1\n26        Tom Lennox  Marko Davidovic     0.0     1\n27        Tom Lennox   Oliver Criddle     0.0     1\n28     Ethan McInnes  Arjun Chiluveru     0.4     1\n29     Ethan McInnes     Joseph Zhang",
        "     0.4     1\n30     Ethan McInnes  Marko Davidovic     0.2     1\n31     Ethan McInnes     Saxon Taylor     0.2     1\n32     Ethan McInnes Theodore Karelas     0.2     1\n33     Ethan McInnes       Tom Lennox     0.2     1\n34      Joseph Zhang Alexander Durbin     0.0     1\n35      Joseph Zhang    Ethan McInnes     0.2     1\n36      Joseph Zhang    Markus Jensen     0.4     1\n37  Alexander Durbin     Joseph Zhang     0.4     1\n38  Alexander Durbin Theodore Karelas     0.4     1\n39  Alexander Durbin       Tom Lennox",
        "     0.4     1\n40  Theodore Karelas Alexander Durbin     0.2     1\n41  Theodore Karelas  Arjun Chiluveru     0.4     1\n42  Theodore Karelas    Ethan McInnes     0.4     1\n43  Theodore Karelas     Joseph Zhang     0.2     1\n44   Arjun Chiluveru Alexander Durbin     0.4     1\n45   Arjun Chiluveru    Ethan McInnes     0.4     1\n46   Arjun Chiluveru     Joseph Zhang     0.4     1\n47   Arjun Chiluveru    Markus Jensen     0.4     1\n48   Arjun Chiluveru     Saxon Taylor     0.4     1\n49   Arjun Chiluveru Theodore Karelas",
        "     0.4     1\n50   Arjun Chiluveru       Tom Lennox     0.4     1\n51    Oliver Criddle Alexander Durbin     0.2     1\n52    Oliver Criddle     Saxon Taylor     0.4     1\n53    Oliver Criddle       Tom Lennox     0.2     1\n54      Saxon Taylor  Arjun Chiluveru     0.2     1\n55      Saxon Taylor     Joseph Zhang     0.0     1\n56      Saxon Taylor  Marko Davidovic     0.0     1\n57      Saxon Taylor   Oliver Criddle     0.4     1\n58   Marko Davidovic    Ethan McInnes     0.4     1\n59   Marko Davidovic   Oliver Criddle",
        "     0.4     1\n60   Marko Davidovic       Tom Lennox     0.4     1\n61       Xavier Gray  Arjun Chiluveru     0.0     1\n62       Xavier Gray     Joseph Zhang     0.0     1\n63       Xavier Gray   Oliver Criddle     0.0     1\n64       Xavier Gray     Saxon Taylor     0.0     1\n65       Xavier Gray Theodore Karelas     0.2     1\n66       Xavier Gray       Tom Lennox     0.2     1\n67     Markus Jensen Alexander Durbin     0.4     1\n68     Markus Jensen  Arjun Chiluveru     0.4     1\n69     Markus Jensen     Joseph Zhang",
        "     0.0     1\n70        Tom Lennox Alexander Durbin     0.2     1\n71        Tom Lennox  Arjun Chiluveru     0.2     1\n72        Tom Lennox    Ethan McInnes     0.0     1\n73        Tom Lennox     Joseph Zhang     0.0     1\n74        Tom Lennox  Marko Davidovic     0.2     1\n75        Tom Lennox    Markus Jensen     0.2     1\n76        Tom Lennox   Oliver Criddle     0.0     1\n77        Tom Lennox      Xavier Gray     0.4     1\n78     Ethan McInnes Alexander Durbin     0.4     1\n79     Ethan McInnes  Arjun Chiluveru",
        "     0.2     1\n80     Ethan McInnes     Joseph Zhang     0.2     1\n81     Ethan McInnes  Marko Davidovic     0.2     1\n82     Ethan McInnes   Oliver Criddle     0.2     1\n83     Ethan McInnes     Saxon Taylor     0.2     1\n84     Ethan McInnes Theodore Karelas     0.2     1\n85     Ethan McInnes       Tom Lennox     0.2     1\n86      Joseph Zhang Alexander Durbin     0.0     1\n87      Joseph Zhang  Arjun Chiluveru     0.2     1\n88      Joseph Zhang    Ethan McInnes     0.0     1\n89      Joseph Zhang    Markus Jensen",
        "     0.4     1\n90   Arjun Chiluveru  Marko Davidovic     0.2     1\n91    Oliver Criddle Theodore Karelas     0.4     1\n92    Oliver Criddle       Tom Lennox     0.4     1\n93      Saxon Taylor  Arjun Chiluveru     0.4     1\n94      Saxon Taylor     Joseph Zhang     0.2     1\n95      Saxon Taylor  Marko Davidovic     0.0     1\n96      Saxon Taylor   Oliver Criddle     0.4     1\n97      Saxon Taylor      Xavier Gray     0.4     1\n98       Xavier Gray     Joseph Zhang     0.0     1\n99     Markus Jensen     Joseph Zhang",
        "     0.2     1\n100       Tom Lennox Alexander Durbin     0.2     1\n101       Tom Lennox    Ethan McInnes     0.2     1\n102       Tom Lennox     Joseph Zhang     0.2     1\n103       Tom Lennox  Marko Davidovic     0.0     1\n104       Tom Lennox   Oliver Criddle     0.0     1\n105    Ethan McInnes     Joseph Zhang     0.4     1\n106    Ethan McInnes    Markus Jensen     0.4     1\n107    Ethan McInnes       Tom Lennox     0.4     1\n108    Ethan McInnes      Xavier Gray     0.4     1\n109     Joseph Zhang Alexander Durbin",
        "     0.0     1\n110     Joseph Zhang    Ethan McInnes     0.2     1\n111     Joseph Zhang      Xavier Gray     0.4     1\n",
        "> ",
        "    overallEdgesList <- do.call(\"rbind\", overallEdgeList)",
        "> ",
        "    overallEdgesList$Score <- rep(1, nrow(overallEdgesList))",
        "> ",
        "    #filter entries under a given score threshold 0.5 ",
        "> ",
        "    overallEdgesList <- filter(overallEdgesList, Network > 0.5)",
        "> ",
        "    #filter entries under a given score threshold 0.5 ",
        "> ",
        "    overallEdgesList",
        "              Source           Target Network Score\n1   Alexander Durbin Alexander Durbin     1.0     1\n2   Alexander Durbin  Arjun Chiluveru     0.8     1\n3   Alexander Durbin    Ethan McInnes     0.8     1\n4   Alexander Durbin     Joseph Zhang     0.8     1\n5   Alexander Durbin  Marko Davidovic     1.0     1\n6   Alexander Durbin    Markus Jensen     0.8     1\n7   Alexander Durbin     Saxon Taylor     0.8     1\n8   Alexander Durbin Theodore Karelas     0.6     1\n9   Alexander Durbin       Tom Lennox     0.8",
        "     1\n10  Alexander Durbin      Xavier Gray     1.0     1\n11  Theodore Karelas  Arjun Chiluveru     0.6     1\n12  Theodore Karelas  Marko Davidovic     1.0     1\n13  Theodore Karelas    Markus Jensen     0.8     1\n14  Theodore Karelas     Saxon Taylor     0.6     1\n15  Theodore Karelas Theodore Karelas     1.0     1\n16  Theodore Karelas       Tom Lennox     0.8     1\n17  Theodore Karelas      Xavier Gray     0.6     1\n18   Arjun Chiluveru Alexander Durbin     0.6     1\n19   Arjun Chiluveru  Arjun Chiluveru",
        "     1.0     1\n20   Arjun Chiluveru    Ethan McInnes     0.6     1\n21   Arjun Chiluveru     Joseph Zhang     0.6     1\n22   Arjun Chiluveru    Markus Jensen     0.6     1\n23   Arjun Chiluveru   Oliver Criddle     1.0     1\n24   Arjun Chiluveru     Saxon Taylor     0.8     1\n25   Arjun Chiluveru Theodore Karelas     0.6     1\n26   Arjun Chiluveru       Tom Lennox     0.6     1\n27   Arjun Chiluveru      Xavier Gray     0.6     1\n28    Oliver Criddle  Arjun Chiluveru     0.6     1\n29    Oliver Criddle     Joseph Zhang",
        "     0.8     1\n30    Oliver Criddle   Oliver Criddle     1.0     1\n31      Saxon Taylor Alexander Durbin     0.6     1\n32      Saxon Taylor    Ethan McInnes     0.6     1\n33      Saxon Taylor    Markus Jensen     0.8     1\n34      Saxon Taylor     Saxon Taylor     1.0     1\n35      Saxon Taylor Theodore Karelas     1.0     1\n36      Saxon Taylor       Tom Lennox     1.0     1\n37      Saxon Taylor      Xavier Gray     0.8     1\n38   Marko Davidovic Alexander Durbin     0.8     1\n39   Marko Davidovic  Arjun Chiluveru",
        "     1.0     1\n40   Marko Davidovic    Ethan McInnes     0.8     1\n41   Marko Davidovic     Joseph Zhang     1.0     1\n42   Marko Davidovic    Markus Jensen     0.8     1\n43   Marko Davidovic   Oliver Criddle     0.8     1\n44   Marko Davidovic     Saxon Taylor     0.8     1\n45   Marko Davidovic Theodore Karelas     1.0     1\n46   Marko Davidovic       Tom Lennox     0.8     1\n47   Marko Davidovic      Xavier Gray     0.8     1\n48       Xavier Gray Alexander Durbin     1.0     1\n49       Xavier Gray  Arjun Chiluveru",
        "     0.6     1\n50       Xavier Gray    Ethan McInnes     1.0     1\n51       Xavier Gray  Marko Davidovic     0.6     1\n52       Xavier Gray    Markus Jensen     1.0     1\n53       Xavier Gray   Oliver Criddle     0.8     1\n54       Xavier Gray     Saxon Taylor     0.6     1\n55       Xavier Gray Theodore Karelas     0.6     1\n56       Xavier Gray       Tom Lennox     0.8     1\n57       Xavier Gray      Xavier Gray     1.0     1\n58     Markus Jensen Alexander Durbin     0.6     1\n59     Markus Jensen  Arjun Chiluveru",
        "     0.6     1\n60     Markus Jensen    Ethan McInnes     0.8     1\n61     Markus Jensen  Marko Davidovic     0.6     1\n62     Markus Jensen    Markus Jensen     1.0     1\n63     Markus Jensen     Saxon Taylor     0.8     1\n64     Markus Jensen Theodore Karelas     0.8     1\n65     Markus Jensen       Tom Lennox     0.8     1\n66     Markus Jensen      Xavier Gray     1.0     1\n67        Tom Lennox    Markus Jensen     0.6     1\n68        Tom Lennox     Saxon Taylor     1.0     1\n69        Tom Lennox Theodore Karelas",
        "     1.0     1\n70        Tom Lennox       Tom Lennox     1.0     1\n71        Tom Lennox      Xavier Gray     0.6     1\n72     Ethan McInnes Alexander Durbin     0.6     1\n73     Ethan McInnes    Ethan McInnes     1.0     1\n74     Ethan McInnes    Markus Jensen     0.6     1\n75     Ethan McInnes   Oliver Criddle     0.6     1\n76     Ethan McInnes      Xavier Gray     0.6     1\n77      Joseph Zhang  Arjun Chiluveru     0.6     1\n78      Joseph Zhang     Joseph Zhang     1.0     1\n79      Joseph Zhang  Marko Davidovic",
        "     0.8     1\n80      Joseph Zhang   Oliver Criddle     0.8     1\n81      Joseph Zhang     Saxon Taylor     0.6     1\n82      Joseph Zhang Theodore Karelas     0.6     1\n83      Joseph Zhang       Tom Lennox     0.8     1\n84      Joseph Zhang      Xavier Gray     0.6     1\n85  Alexander Durbin Alexander Durbin     1.0     1\n86  Alexander Durbin  Arjun Chiluveru     0.6     1\n87  Alexander Durbin    Ethan McInnes     0.6     1\n88  Alexander Durbin  Marko Davidovic     0.8     1\n89  Alexander Durbin    Markus Jensen",
        "     0.6     1\n90  Alexander Durbin   Oliver Criddle     0.6     1\n91  Alexander Durbin     Saxon Taylor     0.8     1\n92  Alexander Durbin      Xavier Gray     0.8     1\n93  Theodore Karelas  Marko Davidovic     1.0     1\n94  Theodore Karelas    Markus Jensen     0.6     1\n95  Theodore Karelas   Oliver Criddle     0.6     1\n96  Theodore Karelas     Saxon Taylor     0.6     1\n97  Theodore Karelas Theodore Karelas     1.0     1\n98  Theodore Karelas       Tom Lennox     0.8     1\n99  Theodore Karelas      Xavier Gray",
        "     0.6     1\n100  Arjun Chiluveru  Arjun Chiluveru     1.0     1\n101  Arjun Chiluveru  Marko Davidovic     0.6     1\n102  Arjun Chiluveru   Oliver Criddle     1.0     1\n103  Arjun Chiluveru      Xavier Gray     0.6     1\n104   Oliver Criddle  Arjun Chiluveru     0.6     1\n105   Oliver Criddle    Ethan McInnes     0.6     1\n106   Oliver Criddle     Joseph Zhang     0.8     1\n107   Oliver Criddle  Marko Davidovic     0.6     1\n108   Oliver Criddle    Markus Jensen     0.8     1\n109   Oliver Criddle   Oliver Criddle",
        "     1.0     1\n110   Oliver Criddle Theodore Karelas     0.6     1\n111   Oliver Criddle      Xavier Gray     0.8     1\n112     Saxon Taylor Alexander Durbin     0.6     1\n113     Saxon Taylor    Ethan McInnes     0.6     1\n114     Saxon Taylor    Markus Jensen     0.8     1\n115     Saxon Taylor     Saxon Taylor     1.0     1\n116     Saxon Taylor Theodore Karelas     0.8     1\n117     Saxon Taylor       Tom Lennox     1.0     1\n118     Saxon Taylor      Xavier Gray     0.6     1\n119  Marko Davidovic Alexander Durbin",
        "     0.8     1\n120  Marko Davidovic  Arjun Chiluveru     0.8     1\n121  Marko Davidovic     Joseph Zhang     0.6     1\n122  Marko Davidovic    Markus Jensen     0.8     1\n123  Marko Davidovic     Saxon Taylor     0.6     1\n124  Marko Davidovic Theodore Karelas     1.0     1\n125  Marko Davidovic      Xavier Gray     0.6     1\n126      Xavier Gray Alexander Durbin     1.0     1\n127      Xavier Gray    Ethan McInnes     1.0     1\n128      Xavier Gray  Marko Davidovic     0.6     1\n129      Xavier Gray    Markus Jensen",
        "     1.0     1\n130      Xavier Gray      Xavier Gray     1.0     1\n131    Markus Jensen    Ethan McInnes     0.6     1\n132    Markus Jensen  Marko Davidovic     0.8     1\n133    Markus Jensen    Markus Jensen     1.0     1\n134    Markus Jensen   Oliver Criddle     0.6     1\n135    Markus Jensen     Saxon Taylor     0.8     1\n136    Markus Jensen Theodore Karelas     0.6     1\n137    Markus Jensen       Tom Lennox     0.6     1\n138    Markus Jensen      Xavier Gray     1.0     1\n139       Tom Lennox     Saxon Taylor",
        "     1.0     1\n140       Tom Lennox Theodore Karelas     1.0     1\n141       Tom Lennox       Tom Lennox     1.0     1\n142    Ethan McInnes    Ethan McInnes     1.0     1\n143    Ethan McInnes    Markus Jensen     0.6     1\n144    Ethan McInnes      Xavier Gray     0.8     1\n145     Joseph Zhang     Joseph Zhang     1.0     1\n146     Joseph Zhang  Marko Davidovic     0.6     1\n147     Joseph Zhang   Oliver Criddle     0.8     1\n148     Joseph Zhang     Saxon Taylor     0.6     1\n149     Joseph Zhang Theodore Karelas",
        "     0.6     1\n150     Joseph Zhang       Tom Lennox     0.6     1\n151     Joseph Zhang      Xavier Gray     0.8     1\n152 Alexander Durbin Alexander Durbin     1.0     1\n153 Alexander Durbin  Arjun Chiluveru     0.8     1\n154 Alexander Durbin    Ethan McInnes     1.0     1\n155 Alexander Durbin     Joseph Zhang     0.8     1\n156 Alexander Durbin  Marko Davidovic     1.0     1\n157 Alexander Durbin    Markus Jensen     0.8     1\n158 Alexander Durbin   Oliver Criddle     0.6     1\n159 Alexander Durbin     Saxon Taylor",
        "     1.0     1\n160 Alexander Durbin Theodore Karelas     0.8     1\n161 Alexander Durbin       Tom Lennox     0.8     1\n162 Alexander Durbin      Xavier Gray     1.0     1\n163 Theodore Karelas Alexander Durbin     0.8     1\n164 Theodore Karelas  Arjun Chiluveru     0.8     1\n165 Theodore Karelas    Ethan McInnes     0.8     1\n166 Theodore Karelas     Joseph Zhang     0.8     1\n167 Theodore Karelas  Marko Davidovic     1.0     1\n168 Theodore Karelas    Markus Jensen     0.8     1\n169 Theodore Karelas   Oliver Criddle",
        "     0.6     1\n170 Theodore Karelas     Saxon Taylor     0.8     1\n171 Theodore Karelas Theodore Karelas     1.0     1\n172 Theodore Karelas       Tom Lennox     0.8     1\n173 Theodore Karelas      Xavier Gray     0.8     1\n174  Arjun Chiluveru Alexander Durbin     0.6     1\n175  Arjun Chiluveru  Arjun Chiluveru     1.0     1\n176  Arjun Chiluveru    Ethan McInnes     0.6     1\n177  Arjun Chiluveru     Joseph Zhang     0.6     1\n178  Arjun Chiluveru    Markus Jensen     0.6     1\n179  Arjun Chiluveru   Oliver Criddle",
        "     1.0     1\n180  Arjun Chiluveru     Saxon Taylor     0.6     1\n181  Arjun Chiluveru Theodore Karelas     0.8     1\n182  Arjun Chiluveru       Tom Lennox     0.6     1\n183  Arjun Chiluveru      Xavier Gray     0.6     1\n184   Oliver Criddle Alexander Durbin     0.6     1\n185   Oliver Criddle  Arjun Chiluveru     0.8     1\n186   Oliver Criddle    Ethan McInnes     0.6     1\n187   Oliver Criddle     Joseph Zhang     1.0     1\n188   Oliver Criddle  Marko Davidovic     0.6     1\n189   Oliver Criddle    Markus Jensen",
        "     0.6     1\n190   Oliver Criddle   Oliver Criddle     1.0     1\n191   Oliver Criddle     Saxon Taylor     0.6     1\n192   Oliver Criddle      Xavier Gray     0.8     1\n193     Saxon Taylor Alexander Durbin     0.6     1\n194     Saxon Taylor    Ethan McInnes     0.6     1\n195     Saxon Taylor    Markus Jensen     0.8     1\n196     Saxon Taylor     Saxon Taylor     1.0     1\n197     Saxon Taylor Theodore Karelas     0.8     1\n198     Saxon Taylor       Tom Lennox     1.0     1\n199  Marko Davidovic Alexander Durbin",
        "     0.8     1\n200  Marko Davidovic  Arjun Chiluveru     0.8     1\n201  Marko Davidovic    Ethan McInnes     0.8     1\n202  Marko Davidovic     Joseph Zhang     0.8     1\n203  Marko Davidovic    Markus Jensen     0.8     1\n204  Marko Davidovic   Oliver Criddle     0.8     1\n205  Marko Davidovic     Saxon Taylor     0.6     1\n206  Marko Davidovic Theodore Karelas     1.0     1\n207  Marko Davidovic       Tom Lennox     0.6     1\n208  Marko Davidovic      Xavier Gray     0.6     1\n209      Xavier Gray Alexander Durbin",
        "     1.0     1\n210      Xavier Gray  Arjun Chiluveru     1.0     1\n211      Xavier Gray    Ethan McInnes     1.0     1\n212      Xavier Gray  Marko Davidovic     1.0     1\n213      Xavier Gray    Markus Jensen     1.0     1\n214      Xavier Gray   Oliver Criddle     0.8     1\n215      Xavier Gray     Saxon Taylor     0.8     1\n216      Xavier Gray Theodore Karelas     0.8     1\n217      Xavier Gray       Tom Lennox     0.8     1\n218      Xavier Gray      Xavier Gray     1.0     1\n219    Markus Jensen Alexander Durbin",
        "     0.6     1\n220    Markus Jensen  Arjun Chiluveru     0.6     1\n221    Markus Jensen    Ethan McInnes     0.8     1\n222    Markus Jensen  Marko Davidovic     0.6     1\n223    Markus Jensen    Markus Jensen     1.0     1\n224    Markus Jensen     Saxon Taylor     0.6     1\n225    Markus Jensen Theodore Karelas     0.6     1\n226    Markus Jensen       Tom Lennox     0.6     1\n227    Markus Jensen      Xavier Gray     1.0     1\n228       Tom Lennox  Arjun Chiluveru     0.8     1\n229       Tom Lennox    Markus Jensen",
        "     0.6     1\n230       Tom Lennox     Saxon Taylor     1.0     1\n231       Tom Lennox Theodore Karelas     1.0     1\n232       Tom Lennox       Tom Lennox     1.0     1\n233       Tom Lennox      Xavier Gray     0.8     1\n234    Ethan McInnes Alexander Durbin     0.8     1\n235    Ethan McInnes  Arjun Chiluveru     0.8     1\n236    Ethan McInnes    Ethan McInnes     1.0     1\n237    Ethan McInnes  Marko Davidovic     0.6     1\n238    Ethan McInnes   Oliver Criddle     0.8     1\n239    Ethan McInnes     Saxon Taylor",
        "     0.6     1\n240    Ethan McInnes Theodore Karelas     0.6     1\n241     Joseph Zhang  Arjun Chiluveru     0.6     1\n242     Joseph Zhang     Joseph Zhang     1.0     1\n243     Joseph Zhang  Marko Davidovic     0.8     1\n244     Joseph Zhang    Markus Jensen     0.8     1\n245     Joseph Zhang   Oliver Criddle     0.8     1\n246     Joseph Zhang     Saxon Taylor     0.6     1\n247     Joseph Zhang Theodore Karelas     0.6     1\n248     Joseph Zhang       Tom Lennox     0.6     1\n",
        "> ",
        "    # Reorder values in first 2 cols and cbind with df[,3]",
        "> ",
        "    m <- cbind(t(apply(overallEdgesList[1:2], 1, sort)), overallEdgesList[,3])",
        "> ",
        "    # Sum third column grouped by first and second column",
        "> ",
        "    overallSSEdgesDF <- aggregate(as.numeric(m[,3]), by = list(m[,1],m[,2]),FUN=sum)",
        "> ",
        "    overallSSEdgesDF <- edgeDataSetup(overallSSEdgesDF)",
        "\u001B[38;5;252mJoining, by = c(\"Group.1\", \"Group.2\")\u001B[39m\n",
        "> ",
        "    for(i in 1:nrow(overallSSEdgesDF)) {",
        "+ ",
        "      if(overallSSEdgesDF[i,\"score\"]>3){",
        "+ ",
        "        overallSSEdgesDF[i,\"mutual\"]<- 2",
        "+ ",
        "      }",
        "+ ",
        "        overallSSEdgesDF[i,\"mutual\"]",
        "+ ",
        "    }",
        "> ",
        "overallSSEdgesDF",
        "\u001B[38;5;246m# A tibble: 62 × 4\u001B[39m\n   source           target           mutual score\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m             \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m Alexander Durbin Alexander Durbin      1   3  \n\u001B[38;5;250m 2\u001B[39m Alexander Durbin Arjun Chiluveru       2   3.4\n\u001B[38;5;250m 3\u001B[39m Arjun Chiluveru  Arjun Chiluveru       1   3  \n\u001B[38;5;250m 4\u001B[39m Alexander Durbin Ethan McInnes         2   3.8\n\u001B[38;5;250m 5\u001B[39m Arjun Chiluveru  Ethan McInnes         1   2  \n",
        "\u001B[38;5;250m 6\u001B[39m Ethan McInnes    Ethan McInnes         1   3  \n\u001B[38;5;250m 7\u001B[39m Alexander Durbin Joseph Zhang          1   1.6\n\u001B[38;5;250m 8\u001B[39m Arjun Chiluveru  Joseph Zhang          1   2.4\n\u001B[38;5;250m 9\u001B[39m Joseph Zhang     Joseph Zhang          1   3  \n\u001B[38;5;250m10\u001B[39m Alexander Durbin Marko Davidovic       2   5.2\n\u001B[38;5;246m# … with 52 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "source(\"~/IBSCMasterFeedbackDash/SchoolDataPrep.R\")",
        "Error in source(\"~/IBSCMasterFeedbackDash/SchoolDataPrep.R\") : \n  ~/IBSCMasterFeedbackDash/SchoolDataPrep.R:779:42: unexpected string constant\n778:                                          \"belongingnessDF\"\n779:                                          \"overallSSEdgesDF\"\n                                              ^\n",
        "> ",
        "source(\"~/IBSCMasterFeedbackDash/SchoolDataPrep.R\")",
        "\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"Group.1\", \"Group.2\")\u001B[39m\n",
        "Error in SSDashAnalysis(file = fileList[[1]]) : \n  object 'overallSSEdgeList' not found\n",
        "> ",
        "source(\"~/IBSCMasterFeedbackDash/SchoolDataPrep.R\")",
        "\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"Group.1\", \"Group.2\")\u001B[39m\n",
        "Error in SSDashAnalysis(file = fileList[[1]]) : \n  object 'overallSSEdgeList' not found\n",
        "> ",
        "source(\"~/IBSCMasterFeedbackDash/SchoolDataPrep.R\")",
        "\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"Group.1\", \"Group.2\")\u001B[39m\n",
        "> ",
        "names(overallSSEdgesDF)",
        "[1] \"source\" \"target\" \"mutual\" \"score\" \n",
        "> ",
        "source(\"~/IBSCMasterFeedbackDash/SchoolDataPrep.R\")",
        "\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"Group.1\", \"Group.2\")\u001B[39m\n",
        "> ",
        "source(\"~/IBSCMasterFeedbackDash/SchoolDataPrep.R\")",
        "\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"surveyDataFiltered..i...Source\", \"surveyDataFiltered..i...Target\")\u001B[39m\n\u001B[38;5;252mJoining, by = c(\"Group.1\", \"Group.2\")\u001B[39m\n",
        "> ",
        "#source the D3 code to link the R to JS",
        "> ",
        "source(\"assets/forcedirected/forcedirected.R\")",
        "\nRestarting R session...\n\n"
    ]
}